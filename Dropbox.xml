<?xml version="1.0" encoding="utf-8" ?>
<Suite Title="Dropbox" Id="Dropbox" Category="File Storage" RequireVersion="8.2" LoginButton="https://seotoolsforexcel.com/logins/dropbox.png" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/Dropbox.xml" HelpUrl="http://seotoolsforexcel.com/dropbox/" HelpText="Documentation">

  <Author Name="Victor Sandberg" Url="http://community.seotoolsforexcel.com/users/diskborste/activity" />

  <DefaultOAuthAuthenticator StayAuthenticated="true" TokenName="access_token" AuthUrl="https://www.dropbox.com/oauth2/authorize?client_id=t6flg4vatiuq8bb&amp;response_type=token&amp;redirect_uri={0}&amp;state=seotools"/>

	<Resources>
    <Resource Id="Fail">
			<Fail>
				<Regex Expr="did not match pattern \'\(\/" Group="0" Fail.Action="Message" Fail.Message="Invalid folder syntax"/>
				<Regex Expr="^Error" Group="0" Fail.Action="Message" Fail.Message="Error. Invalid folder syntax?"/>
				<JsonPath Expr="user_message"/>
				<JsonPath Expr="error_summary"/>
			</Fail>
    </Resource>
    <Resource Id="Authentication">
			<RequestMethod>POST</RequestMethod>
			<RequestContentType>application/json</RequestContentType>
			<RequestHeaders>
				<Header Name='Authorization'>Bearer @(Model.Authenticator.Token)</Header>
			</RequestHeaders>
    </Resource>
  </Resources>

  <RestConnector Id="ListFoldersFiles" Title="List Folders &amp; Files" Group="Content" HelpUrl="https://www.dropbox.com/developers/documentation/http/documentation#files-list_folder" HelpText="Returns the contents of folders.">
    <Parameters>
      <Text Id="Path" Title="Path" HelpText="pattern=(/(.|[\r\n])*)?|id:.*|(ns:[0-9]+(/.*)?)"/>
      <Checkbox Id="Recursive" Title="Recursive" DefaultValue="true" HelpText="If true, the list folder operation will be applied recursively to all subfolders and the response will contain contents of all subfolders."/>
      <Checkbox Id="Deleted" Title="Include Deleted"/>
    </Parameters>
    <Paging PageSize="100" EvenPages="false">
      <Parse>
        <JsonPath Id="Cursor" Expr="cursor"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
				<Resource Id="Authentication"/>
        <RequestBody>
					<![CDATA[
						@{
							var dict = new Dictionary<string, object>();

							if(Model.PageCursor.Page == 0)
							{
								dict.Add("recursive", Model.Recursive);
								dict.Add("include_deleted", Model.Deleted);
								dict.Add("path", Model.Path == null ? "" : Model.Path);

							}
							else
							{
								dict.Add("cursor", (Model.Cursor));
							}

							var output = Newtonsoft.Json.JsonConvert.SerializeObject(dict);
						}
						@output
					]]>
        </RequestBody>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
				https://api.dropboxapi.com/2/files/list_folder
				@(Model.PageCursor.Page != 0 ? "/continue" : "")
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
			<JsonPath Expr="entries[*]">
				<JsonPath Expr="['.tag']" Id="Tag" Title="Tag" Converter="String" DefaultValue=""/>
				<JsonPath Expr="id" Id="Id" Title="Id" Converter="String" DefaultValue=""/>
				<JsonPath Expr="name" Id="Name" Title="Name" Converter="String"/>
				<JsonPath Expr="path_display" Id="Path" Title="Path" Converter="String"/>
				<JsonPath Expr="client_modified" Id="Modified" Title="Modified" Converter="Auto" DefaultValue=""/>
				<JsonPath Expr="size" Id="Size" Title="Size" Converter="Auto" DefaultValue=""/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="Search" Title="Search" Group="Content" HelpUrl="https://www.dropbox.com/developers/documentation/http/documentation#files-search" HelpText="Searches for files and folders.">
    <Parameters>
      <Text Id="Query" Title="Query" Debug.DefaultValue="xls" Required="true"/>
      <Text Id="Path" Title="Path" Required="false" HelpText="pattern=(/(.|[\r\n])*)?|id:.*|(ns:[0-9]+(/.*)?)"/>
    </Parameters>
    <Paging PageSize="100" EvenPages="true">
      <Parse>
        <JsonPath Id="NextToken" Expr="cursor"/>
      </Parse>
    </Paging>
		<Fetch>
      <HttpSettings>
        <Resource Id="Authentication"/>
        <RequestBody>
					<![CDATA[
						@{
							var output = Model.PageCursor.Page != 0
								? GetToken()
								: GetRequestData();
						}
						@output
					]]>
        </RequestBody>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
				https://api.dropboxapi.com/2/files/
				@(Model.PageCursor.Page != 0 ? "search/continue_v2" : "search_v2")
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
			<JsonPath Expr="matches[*].metadata.metadata">
				<JsonPath Expr="['.tag']" Id="Tag" Title="Tag" Converter="String" DefaultValue=""/>
				<JsonPath Expr="id" Id="Id" Title="Id" Converter="String" DefaultValue=""/>
				<JsonPath Expr="name" Id="Name" Title="Name" Converter="String"/>
				<JsonPath Expr="path_display" Id="Path" Title="Path" Converter="String"/>
				<JsonPath Expr="client_modified" Id="Modified" Title="Modified" Converter="Auto" DefaultValue=""/>
				<JsonPath Expr="size" Id="Size" Title="Size" Converter="Auto" DefaultValue=""/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="ListSharedFolders" Title="Shared Folders" Group="Content" HelpUrl="https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_folders" HelpText="Return the list of all shared folders the current user has access to.">
    <Parameters>
    </Parameters>
    <Paging PageSize="100" EvenPages="true">
      <Parse>
        <JsonPath Id="Cursor" Expr="cursor"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <Resource Id="Authentication"/>
        <RequestBody>
					<![CDATA[
						@{
							var dict = new Dictionary<string, object>();

							if(Model.PageCursor.Page == 0)
								dict.Add("limit", Model.PageCursor.PageSize);
							else
								dict.Add("cursor", (Model.Cursor));

							var output = Newtonsoft.Json.JsonConvert.SerializeObject(dict);
						}
						@output
					]]>
        </RequestBody>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
				https://api.dropboxapi.com/2/sharing/list_folders
				@(Model.PageCursor.Page != 0 ? "/continue" : "")
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
			<JsonPath Expr="entries[*]">
				<JsonPath Expr="access_type.['.tag']" Id="Tag" Title="Tag" Converter="String" DefaultValue=""/>
				<JsonPath Expr="shared_folder_id" Id="Id" Title="Id" Converter="String" DefaultValue=""/>
				<JsonPath Expr="name" Id="Name" Title="Name" Converter="String"/>
				<JsonPath Expr="time_invited" Id="Invited" Title="Invited" Converter="Auto" DefaultValue=""/>
				<JsonPath Expr="is_team_folder" Id="TeamFolder" Title="Team Folder" Converter="Bool"/>
				<JsonPath Expr="is_inside_team_folder" Id="InsideTeamFolder" Title="Inside Team Folder" Converter="Bool"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="ListReceivedFiles" Title="Received Files" Group="Content" HelpUrl="https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_received_files" HelpText="Returns a list of all files shared with current user.">
    <Parameters>
    </Parameters>
    <Paging PageSize="100" EvenPages="true">
      <Parse>
        <JsonPath Id="Cursor" Expr="cursor"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <Resource Id="Authentication"/>
        <RequestBody>
					<![CDATA[
						@{
							var dict = new Dictionary<string, object>();
							if(Model.PageCursor.Page == 0)
								dict.Add("limit", Model.PageCursor.PageSize);
							else
								dict.Add("cursor", (Model.Cursor));

							var output = Newtonsoft.Json.JsonConvert.SerializeObject(dict);
						}
						@output
					]]>
        </RequestBody>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
				https://api.dropboxapi.com/2/sharing/list_received_files
				@(Model.PageCursor.Page != 0 ? "/continue" : "")
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
			<JsonPath Expr="entries[*]">
				<JsonPath Expr="access_type.['.tag']" Id="Tag" Title="Tag" Converter="String" DefaultValue=""/>
				<JsonPath Expr="id" Id="Id" Title="Id" Converter="String" DefaultValue=""/>
				<JsonPath Expr="name" Id="Name" Title="Name" Converter="String"/>
				<JsonPath Expr="time_invited" Id="Invited" Title="Invited" Converter="Auto" DefaultValue=""/>
				<JsonPath Expr="parent_shared_folder_id" Id="ParentSharedFolderId" Title="Parent Shared Folder Id" Converter="String"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="AccountSpaceUsage" Title="Space Usage" Group="Account" HelpUrl="https://www.dropbox.com/developers/documentation/http/documentation#users-get_space_usage" HelpText="Get the space usage information for the current user's account.">
    <Fetch>
      <HttpSettings>
        <Resource Id="Authentication"/>
        <RequestBody>
					null
        </RequestBody>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
				https://api.dropboxapi.com/2/users/get_space_usage
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
			<JsonPath Expr="used" Id="Used" Title="Used" Converter="Long"/>
			<JsonPath Expr="allocation.allocated" Id="Allocated" Title="Allocated" Converter="Long"/>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

	  <RazorFunctions>
    <![CDATA[
		string GetToken() {
			var dictCursor = new Dictionary<string, object>();
			dictCursor.Add("cursor", Model.NextToken);
			return Newtonsoft.Json.JsonConvert.SerializeObject(dictCursor);
		}

		string GetRequestData() {
			var dict = new Dictionary<string, object>();
			var dictOptions = new Dictionary<string, object>();

			if(!string.IsNullOrEmpty(Model.Path)){
				dictOptions.Add("path", Model.Path);
			}

			dictOptions.Add("max_results", Model.PageCursor.NextTake);

			dict.Add("query", Model.Query);
			dict.Add("options", dictOptions);

			return Newtonsoft.Json.JsonConvert.SerializeObject(dict);
		}
    ]]>
  </RazorFunctions>

</Suite>